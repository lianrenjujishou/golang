// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hello

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActionClient is the client API for Action service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionClient interface {
	Hit(ctx context.Context, opts ...grpc.CallOption) (Action_HitClient, error)
}

type actionClient struct {
	cc grpc.ClientConnInterface
}

func NewActionClient(cc grpc.ClientConnInterface) ActionClient {
	return &actionClient{cc}
}

func (c *actionClient) Hit(ctx context.Context, opts ...grpc.CallOption) (Action_HitClient, error) {
	stream, err := c.cc.NewStream(ctx, &Action_ServiceDesc.Streams[0], "/action/hit", opts...)
	if err != nil {
		return nil, err
	}
	x := &actionHitClient{stream}
	return x, nil
}

type Action_HitClient interface {
	Send(*X) error
	Recv() (*Y, error)
	grpc.ClientStream
}

type actionHitClient struct {
	grpc.ClientStream
}

func (x *actionHitClient) Send(m *X) error {
	return x.ClientStream.SendMsg(m)
}

func (x *actionHitClient) Recv() (*Y, error) {
	m := new(Y)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActionServer is the server API for Action service.
// All implementations must embed UnimplementedActionServer
// for forward compatibility
type ActionServer interface {
	Hit(Action_HitServer) error
	mustEmbedUnimplementedActionServer()
}

// UnimplementedActionServer must be embedded to have forward compatible implementations.
type UnimplementedActionServer struct {
}

func (UnimplementedActionServer) Hit(Action_HitServer) error {
	return status.Errorf(codes.Unimplemented, "method Hit not implemented")
}
func (UnimplementedActionServer) mustEmbedUnimplementedActionServer() {}

// UnsafeActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionServer will
// result in compilation errors.
type UnsafeActionServer interface {
	mustEmbedUnimplementedActionServer()
}

func RegisterActionServer(s grpc.ServiceRegistrar, srv ActionServer) {
	s.RegisterService(&Action_ServiceDesc, srv)
}

func _Action_Hit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ActionServer).Hit(&actionHitServer{stream})
}

type Action_HitServer interface {
	Send(*Y) error
	Recv() (*X, error)
	grpc.ServerStream
}

type actionHitServer struct {
	grpc.ServerStream
}

func (x *actionHitServer) Send(m *Y) error {
	return x.ServerStream.SendMsg(m)
}

func (x *actionHitServer) Recv() (*X, error) {
	m := new(X)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Action_ServiceDesc is the grpc.ServiceDesc for Action service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Action_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "action",
	HandlerType: (*ActionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "hit",
			Handler:       _Action_Hit_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bipb/bi.proto",
}
